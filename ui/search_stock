import sys
from PyQt5.QtWidgets import *
import win32com.client
import ctypes
 
################################################
# PLUS 공통 OBJECT
g_objStockCode = win32com.client.Dispatch("CpUtil.CpStockCode")
g_objCodeMgr = win32com.client.Dispatch('CpUtil.CpCodeMgr')
g_objCpStatus = win32com.client.Dispatch('CpUtil.CpCybos')
g_objCpTrade = win32com.client.Dispatch('CpTrade.CpTdUtil') 
 
################################################
# PLUS 실행 기본 체크 함수
def InitPlusCheck():
    # 프로세스가 관리자 권한으로 실행 여부
    if ctypes.windll.shell32.IsUserAnAdmin():
        print('정상: 관리자권한으로 실행된 프로세스입니다.')
    else:
        print('오류: 일반권한으로 실행됨. 관리자 권한으로 실행해 주세요')
        return False
 
    # 연결 여부 체크
    if (g_objCpStatus.IsConnect == 0):
        print("PLUS가 정상적으로 연결되지 않음. ")
        return False
 
    # # 주문 관련 초기화 - 계좌 관련 코드가 있을 때만 사용
    # if (g_objCpTrade.TradeInit(0) != 0):
    #     print("주문 초기화 실패")
    #     return False
 
    return True       
        
class CpMarketEye:
    def __init__(self):
        self.objRq = win32com.client.Dispatch("CpSysDib.MarketEye")
        self.RpFiledIndex = 0
 
 
    def Request(self, codes, dataInfo):
        # 0: 종목코드 4: 현재가 10: 거래량 20: 상장주식수 67: PER 72: 액면가 92: 영업이익률
        rqField = [0, 4, 10, 20, 67, 72, 92]  # 요청 필드
 
        self.objRq.SetInputValue(0, rqField)  # 요청 필드
        self.objRq.SetInputValue(1, codes)  # 종목코드 or 종목코드 리스트
        self.objRq.BlockRequest()
 
        # 현재가 통신 및 통신 에러 처리
        rqStatus = self.objRq.GetDibStatus()
#        print("통신상태", rqStatus, self.objRq.GetDibMsg1())
        if rqStatus != 0:
            return False
 
        cnt = self.objRq.GetHeaderValue(2)
 
        for i in range(cnt):
            code = self.objRq.GetDataValue(0, i)  # 코드
            cur = self.objRq.GetDataValue(1, i)  # 종가
            volume = self.objRq.GetDataValue(2, i) # 거래량
            listedStock = self.objRq.GetDataValue(3, i)  # 상장주식수
            per = self.objRq.GetDataValue(4, i)  # PER
            face = self.objRq.GetDataValue(5, i) # 액면가
            rate = self.objRq.GetDataValue(6, i)  # 매출액영업이익률
            maketAmt = listedStock * cur
            if g_objCodeMgr.IsBigListingStock(code) :
                maketAmt *= 1000
                
            if face > 0:
                price = 5000 / face * cur
            else:
                price = 0

            # key(종목코드) = tuple(매출액영업이익률)
            dataInfo[code] = (maketAmt, rate, volume, per, price)
 
        return True
 
class CSearchStock():
    def __init__(self):
        self.dataInfo = {}
 
 
    def GetStock(self):
        while True:
            name = input("주식명을 입력하세요 : ")
            code = g_objStockCode.NameToCode(name)
            if code != "":
                break
            print("해당 주식은 없습니다.")

        objMarket = CpMarketEye()
        objMarket.Request(code, self.dataInfo)
 
    def PrintStock(self):
 
        data2 = self.dataInfo.items()
        for item in data2:
            name = g_objCodeMgr.CodeToName(item[0])
            maketAmt = item[1][0]
            rate = item[1][1]
            volume = item[1][2]
            per = item[1][3]
            price = item[1][4]
            print('%s 시가총액: %s' %(name, format(maketAmt, ',')))
            print('%s 영업이익률: %s' %(name, format(rate, ',')))
            print('%s 거래량: %s' %(name, format(volume, ',')))
            print('%s PER: %s' %(name, format(per, ',')))
            print('%s 환산주가: %s' %(name, format(price, ','))) 

if __name__ == "__main__":
     objSearchStock = CSearchStock()
     objSearchStock.GetStock()
     objSearchStock.PrintStock()